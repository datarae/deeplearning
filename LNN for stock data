import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Ridge

class LiquidNeuralNetwork:
    def __init__(self, input_size, reservoir_size, spectral_radius=0.95, sparsity=0.1):
        self.input_size = input_size
        self.reservoir_size = reservoir_size

        # Initialize input and reservoir weights
        self.W_in = np.random.rand(reservoir_size, input_size) - 0.5
        self.W_res = np.random.rand(reservoir_size, reservoir_size) - 0.5

        # Scale reservoir weights by spectral radius to ensure stability
        eigenvalues = np.max(np.abs(np.linalg.eigvals(self.W_res)))
        self.W_res *= spectral_radius / eigenvalues

        # Sparsify reservoir weights
        mask = np.random.rand(reservoir_size, reservoir_size) > sparsity
        self.W_res *= mask

        self.state = np.zeros((reservoir_size, 1))

    def forward(self, input_data):
        input_data = input_data.reshape(-1, 1)
        self.state = np.tanh(np.dot(self.W_in, input_data) + np.dot(self.W_res, self.state))
        return self.state

    def train_readout(self, X, Y, alpha=1e-5):
        ridge = Ridge(alpha=alpha, fit_intercept=False)
        ridge.fit(X, Y)
        self.readout_weights = ridge.coef_

    def predict(self, X):
        return np.dot(X, self.readout_weights.T)

# NOTE: the forward function updates the reservoir state using the input and internal weights
# NOTE: in train_readout, the final reservoir states are collected as inputs (X) to train a linear regression model against the target output (Y)

#Initialize the neural network
input_size = 1
reservoir_size = 100

lnn = LiquidNeuralNetwork(input_size, reservoir_size)

#Collect reservoir states for training data
reservoir_states = []
for point in train_data:
  state = lnn.forward(np.array([point]))
  reservoir_states.append(state.flatten())

reservoir_states = np.array(reservoir_states)

#Prepare the target output -- for this we will use the next day's price --
X_train = reservoir_states[:-1]
y_train = reservoir_states[1:]

#Train the readout layer
lnn.train_readout(reservoir_states, train_data)

#Generate reservoir states for the test data
test_states = []
for point in test_data:
  state = lnn.forward(np.array([point]))
  test_states.append(state.flatten())

test_states = np.array(test_states)
predictions = lnn.predict(test_states)

#De-normalize predictions for comparison with actual values
predicted_prices = predictions * (close_prices.max() - close_prices.min()) + close_prices.min()

# Adjust the slicing of actual_prices to match the length of predicted_prices
actual_prices = close_prices[split_index + 1:split_index + 1 + len(predicted_prices)]

# Ensure actual_prices and predicted_prices have the same length
if len(predicted_prices) > len(actual_prices):
    predicted_prices = predicted_prices[:len(actual_prices)]
elif len(actual_prices) > len(predicted_prices):
    actual_prices = actual_prices[:len(predicted_prices)]

# Now calculate MSE
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(actual_prices, predicted_prices)
print(f"Mean Squared Error: {mse}")

# Test the model
# Get the corresponding date range for the test data
test_dates = data.index[split_index + 1:]  # Align with actual_prices length

# Ensure lengths match
print(len(test_dates), len(actual_prices), len(predicted_prices[:-1]))  # They should be the same

# Adjust lengths to ensure they match
if len(test_dates) > len(predicted_prices):
    test_dates = test_dates[:len(predicted_prices)]
elif len(predicted_prices) > len(test_dates):
    predicted_prices = predicted_prices[:len(test_dates)]

# Check lengths again to confirm
print(len(test_dates), len(actual_prices), len(predicted_prices))  # All should now match

# Now plot
plt.figure(figsize=(12, 6))
plt.plot(test_dates, actual_prices, label="Actual Prices")
plt.plot(test_dates, predicted_prices, label="Predicted Prices")
plt.title("S&P 500 Actual vs Predicted Prices")
plt.xlabel("Date")
plt.ylabel("Price")
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Check lengths again to confirm (they should match)
print(len(test_dates), len(actual_prices), len(predicted_prices))  # All should now match

# Calculate percent error without slicing
percent_error = (actual_prices - predicted_prices) / actual_prices * 100

# Plot Percent Error with Dates
plt.figure(figsize=(12, 6))
plt.plot(test_dates, percent_error, label="Percent Error")
plt.title("Prediction Percent Error Over Time")
plt.xlabel("Date")
plt.ylabel("Percent Error (%)")
plt.axhline(0, color="gray", linestyle="--")  # Reference line at 0
plt.xticks(rotation=45)  # Rotate dates for readability
plt.legend()
plt.tight_layout()
plt.show()

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.preprocessing import MinMaxScaler

class TransformerTimeSeries(nn.Module):
    def __init__(self, input_size=1, d_model=64, nhead=8, num_layers=3, output_size=1):
        super(TransformerTimeSeries, self).__init__()
        self.d_model = d_model
        self.embedding = nn.Linear(input_size, d_model)
        self.transformer = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=d_model, nhead=nhead), num_layers=num_layers
        )
        self.fc = nn.Linear(d_model, output_size)
    
    def forward(self, src):
        # Embed input sequence
        src = self.embedding(src) * np.sqrt(self.d_model)
        
        # Pass through transformer encoder
        output = self.transformer(src)
        
        # Apply final linear layer to the last output (for prediction)
        output = self.fc(output[:, -1, :])  # Take the last time step's output for prediction
        return output

# Transformers expect sequences as an input. For stock prediction, we will structure the data so that each sequence represents a number of past days and the target is the next day's price
# Pytorch's nn.Transformer expects a 3D input for shapes, and this is a 4D tensor, so we will convert it
# Convert the data into sequences without extra dimension
X_transformer, Y_transformer = [], []
for i in range(len(scaled_data) - sequence_length):
    X_transformer.append(scaled_data[i:i+sequence_length])
    Y_transformer.append(scaled_data[i+sequence_length])

X_transformer = torch.tensor(X_transformer, dtype=torch.float32)  # Shape (batch_size, sequence_length)
Y_transformer = torch.tensor(Y_transformer, dtype=torch.float32).unsqueeze(-1)  # Shape (batch_size, 1)

# Split into training and testing sets
split_index = int(0.8 * len(X_transformer))
X_train, X_test = X_transformer[:split_index], X_transformer[split_index:]
Y_train, Y_test = Y_transformer[:split_index], Y_transformer[split_index:]

# Train the model
# Training loop
num_epochs = 50
for epoch in range(num_epochs):
    model.train()
    optimizer.zero_grad()
    
    # Forward pass (no need for tgt)
    outputs = model(X_train)
    loss = criterion(outputs, Y_train)
    
    # Backward and optimize
    loss.backward()
    optimizer.step()
    
    if (epoch + 1) % 10 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Test the model
model.eval()  # Set the model to evaluation mode
with torch.no_grad():  # Disable gradient computation for inference
    predictions = model(X_test).squeeze().cpu().numpy()  # Convert predictions to numpy array

# Adjust test_dates to match the length of actual_prices and predicted_prices
min_length = min(len(test_dates), len(actual_prices), len(predicted_prices))
test_dates = test_dates[:min_length]
actual_prices = actual_prices[:min_length]
predicted_prices = predicted_prices[:min_length]

# Confirm that lengths now match
print(len(test_dates), len(actual_prices), len(predicted_prices))  # All should be the same

# De-normalize the stock prices to get acutal predicted price values
predicted_prices = scaler.inverse_transform(predictions.reshape(-1, 1)).flatten()
actual_prices = scaler.inverse_transform(Y_test.cpu().numpy().reshape(-1, 1)).flatten()

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(actual_prices, predicted_prices)
print(f"Mean Squared Error: {mse}")

# Plot actual vs predicted prices
plt.figure(figsize=(12, 6))
plt.plot(test_dates, actual_prices, label="Actual Prices", color="blue")
plt.plot(test_dates, predicted_prices, label="Predicted Prices", color="orange")
plt.title("S&P 500 Actual vs Predicted Prices")
plt.xlabel("Date")
plt.ylabel("Price")
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Check lengths again to confirm (they should match)
print(len(test_dates), len(actual_prices), len(predicted_prices))  # All should now match

# Calculate percent error without slicing
percent_error = (actual_prices - predicted_prices) / actual_prices * 100

# Plot Percent Error with Dates
plt.figure(figsize=(12, 6))
plt.plot(test_dates, percent_error, label="Percent Error")
plt.title("Prediction Percent Error Over Time")
plt.xlabel("Date")
plt.ylabel("Percent Error (%)")
plt.axhline(0, color="gray", linestyle="--")  # Reference line at 0
plt.xticks(rotation=45)  # Rotate dates for readability
plt.legend()
plt.tight_layout()
plt.show()

